generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SELLER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Customer {
  id           String           @id @default(uuid())
  firstName    String
  middleName   String?
  lastName     String
  email        String           @unique
  password     String?
  googleId     String?          @unique
  role         Role             @default(CUSTOMER)
  profile      CustomerProfile?
  orders       Order[]
  transactions Transaction[]
  createdAt    DateTime       @default(now())
}

model CustomerProfile {
  id           String   @id @default(uuid())
  gender       String?
  profilePhoto String?
  customerId   String   @unique
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Seller {
  id         String         @id @default(uuid())
  firstName  String
  middleName String?
  lastName   String
  email      String         @unique
  password   String?
  googleId   String?        @unique
  role       Role           @default(SELLER)
  profile    SellerProfile?
  products   Product[]
  OrderItem  OrderItem[]
}

model SellerProfile {
  id           String  @id @default(uuid())
  gender       String?
  profilePhoto String?
  sellerId     String  @unique
  seller       Seller  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  address      String?
  shopDetails  String?
  rating       Float?
  totalSales   Int?
  totalIncome  Float?
  about        String?
}

model Product {
  id         String      @id @default(uuid())
  name       String
  price      Float
  description String?
  stock      Int
  sellerId   String
  seller     Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  images     String[]
}

model Order {
  id              String         @id @default(uuid())
  customerId      String
  customer        Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  orderStatus     OrderStatus    @default(PENDING)
  deliveryDate    DateTime       @default(dbgenerated("(now() + interval '10 days')"))
  deliveryAddress String
  orderTotal      Float
  orderItems      OrderItem[]
  orderPayments   OrderPayment[]
  Transaction     Transaction[]
}

model OrderItem {
  id             String  @id @default(uuid())
  orderId        String
  order          Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId      String
  product        Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sellerId       String
  seller         Seller  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  quantity       Int
  unitPrice      Float
  totalPrice     Float
  shipmentStatus String  @default("Pending") // NEW FIELD
  trackingId     String? // NEW FIELD
}

model OrderPayment {
  id            String      @id @default(uuid())
  orderId       String
  order         Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  transactionId String      @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  paymentMethod String
  paymentStatus String
  paymentDate   DateTime    @default(now())
  amount        Float
}

model Transaction {
  id            String        @id @default(uuid())
  transactionId String        @unique
  customerId    String
  customer      Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderId       String
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paymentMethod String
  paymentStatus String
  paymentDate   DateTime      @default(now())
  amount        Float
  OrderPayment  OrderPayment?
}

model Otp {
  id        String   @id @default(uuid())
  otp       Int      @unique
  email     String
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("(now() + interval '10 minutes')"))
}
